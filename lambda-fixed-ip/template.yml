Description: Fixed IP Lambda with EC2 NAT Instance

Parameters:
    VpcCIDR:
        Description: VPC IP range (CIDR notation)
        Type: String
        Default: 10.32.0.0/16
    PublicSubnetCIDR:
        Description: IP range for the Public Subnet
        Type: String
        Default: 10.32.10.0/24
    PrivateSubnetCIDR:
        Description: IP range for the Private Subnet
        Type: String
        Default: 10.32.20.0/24
    EC2InstanceAmi:
        Description: AWS AMI Id
        Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
        Default: /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-arm64-gp2
    EC2InstanceType:
        Description: NAT Instance Size
        Type: String
        Default: t4g.nano
        AllowedValues:
            - t4g.nano
            - t4g.micro
            - t4g.small
            - t4g.medium

Metadata:
    AWS::CloudFormation::Interface:
        ParameterGroups:
            - Label:
                  default: Network Configuration
              Parameters:
                  - VpcCIDR
                  - PublicSubnetCIDR
                  - PrivateSubnetCIDR
            - Label:
                  default: EC2 Configuration
              Parameters:
                  - EC2InstanceAmi
                  - EC2InstanceType

Resources:
    # VPC
    VPC:
        Type: AWS::EC2::VPC
        Properties:
            CidrBlock: !Ref VpcCIDR
            EnableDnsSupport: true
            EnableDnsHostnames: true
            Tags:
                - Key: Name
                  Value: !Sub ${AWS::StackName}

    # Internet Gateway
    InternetGateway:
        Type: AWS::EC2::InternetGateway
        Properties:
            Tags:
                - Key: Name
                  Value: !Sub ${AWS::StackName}

    # Attach Internet Gateway to VPC
    InternetGatewayAttachment:
        Type: AWS::EC2::VPCGatewayAttachment
        Properties:
            InternetGatewayId: !Ref InternetGateway
            VpcId: !Ref VPC

    # Public Subnet
    PublicSubnet:
        Type: AWS::EC2::Subnet
        Properties:
            VpcId: !Ref VPC
            AvailabilityZone: !Select [0, !GetAZs ""]
            CidrBlock: !Ref PublicSubnetCIDR
            MapPublicIpOnLaunch: true
            Tags:
                - Key: Name
                  Value: !Sub ${AWS::StackName} Public Subnet

    # Public Route Table
    PublicRouteTable:
        Type: AWS::EC2::RouteTable
        Properties:
            VpcId: !Ref VPC
            Tags:
                - Key: Name
                  Value: !Sub ${AWS::StackName} Public Routes

    # Default Route to IG
    DefaultPublicRoute:
        Type: AWS::EC2::Route
        DependsOn: InternetGatewayAttachment
        Properties:
            RouteTableId: !Ref PublicRouteTable
            DestinationCidrBlock: 0.0.0.0/0
            GatewayId: !Ref InternetGateway

    # Public Subnet #1
    PublicSubnetRouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            RouteTableId: !Ref PublicRouteTable
            SubnetId: !Ref PublicSubnet

    # Private Subnet
    PrivateSubnet:
        Type: AWS::EC2::Subnet
        Properties:
            VpcId: !Ref VPC
            AvailabilityZone: !Select [0, !GetAZs ""]
            CidrBlock: !Ref PrivateSubnetCIDR
            MapPublicIpOnLaunch: true
            Tags:
                - Key: Name
                  Value: !Sub ${AWS::StackName} Private Subnet

    # Private Route Table
    PrivateRouteTable:
        Type: AWS::EC2::RouteTable
        Properties:
            VpcId: !Ref VPC
            Tags:
                - Key: Name
                  Value: !Sub ${AWS::StackName} Private Routes

    # Private Subnet
    PrivateSubnetRouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            RouteTableId: !Ref PrivateRouteTable
            SubnetId: !Ref PrivateSubnet

    # Autoscaling Group for NAT Instance
    AutoScalingGroup:
        Type: AWS::AutoScaling::AutoScalingGroup
        Properties:
            VPCZoneIdentifier:
                - !Ref PublicSubnet
            LaunchTemplate:
                LaunchTemplateId: !Ref LaunchTemplate
                Version: !GetAtt LaunchTemplate.LatestVersionNumber
            MinSize: 1
            MaxSize: 1
            DesiredCapacity: 1
            Tags:
                - Key: Name
                  Value: !Sub ${AWS::StackName} NAT Instance
                  PropagateAtLaunch: true

    # Launch Template for NAT Instance
    LaunchTemplate:
        Type: AWS::EC2::LaunchTemplate
        Properties:
            LaunchTemplateName: !Sub ${AWS::StackName}-LaunchTemplate
            LaunchTemplateData:
                ImageId: !Ref EC2InstanceAmi
                InstanceType: !Ref EC2InstanceType
                IamInstanceProfile:
                    Arn: !GetAtt NATInstanceProfile.Arn
                SecurityGroupIds:
                    - !Ref NATInstanceSecurityGroup
                UserData:
                    Fn::Base64: !Sub |
                        #!/bin/sh
                        yum update -y

                        # install iptable
                        yum install -y iptables-services

                        # enable iptable
                        systemctl enable iptables.service

                        # enable IP forwarding
                        sysctl -w net.ipv4.ip_forward=1

                        # configure NAT
                        iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE

                        # save iptable
                        service iptables save

                        # start iptable
                        service iptables start

                        # get instance-id
                        EC2_INSTANCE_ID=$(curl -s http://instance-data/latest/meta-data/instance-id)

                        # associate the Elastic IP address to the instance
                        aws ec2 associate-address --instance-id $EC2_INSTANCE_ID --allocation-id ${ElasticIP.AllocationId} --allow-reassociation  --region ${AWS::Region}

                        # disable source/destination check
                        aws ec2 modify-instance-attribute --instance-id $EC2_INSTANCE_ID --source-dest-check "{\"Value\": false}" --region ${AWS::Region}

                        # replace or create route in the default private route table
                        aws ec2 replace-route --route-table-id ${PrivateRouteTable} --destination-cidr-block "0.0.0.0/0" --instance-id $EC2_INSTANCE_ID --region ${AWS::Region} || aws ec2 create-route --route-table-id ${PrivateRouteTable} --destination-cidr-block "0.0.0.0/0" --instance-id $EC2_INSTANCE_ID --region ${AWS::Region}

    # Security Group for NAT Instance
    NATInstanceSecurityGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
            GroupDescription: !Sub ${AWS::StackName} NAT Instance SG
            VpcId: !Ref VPC
            SecurityGroupIngress:
                # only allow inbound traffic from the VPC CIDR
                - IpProtocol: tcp
                  FromPort: 0
                  ToPort: 65535
                  CidrIp: !Ref VpcCIDR
            Tags:
                - Key: Name
                  Value: !Sub ${AWS::StackName} NAT Instance SG
    # NAT Instance role
    NATInstanceRole:
        Type: AWS::IAM::Role
        Properties:
            Path: /
            RoleName: !Sub ${AWS::StackName}-NATInstanceRole
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                    - Effect: Allow
                      Principal:
                          Service:
                              - ec2.amazonaws.com
                      Action: sts:AssumeRole
            ManagedPolicyArns:
                - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore # for SSM
            Policies:
                - PolicyName: !Sub ${AWS::StackName}-NATInstancePolicy
                  PolicyDocument:
                      Version: "2012-10-17"
                      Statement:
                          # allow Elastic IP association & route creation
                          - Effect: Allow
                            Action:
                                - ec2:AssociateAddress
                                - ec2:ReplaceRoute
                                - ec2:CreateRoute
                                - ec2:ModifyInstanceAttribute
                            Resource: "*"
    # NAT Instance profile
    NATInstanceProfile:
        Type: AWS::IAM::InstanceProfile
        Properties:
            Path: /
            InstanceProfileName: !Sub ${AWS::StackName}-NATInstanceProfile
            Roles:
                - !Ref NATInstanceRole

    # Elastic IP
    ElasticIP:
        Type: AWS::EC2::EIP
        Properties:
            Tags:
                - Key: Name
                  Value: !Sub ${AWS::StackName}-ElasticIP

    # Node Lambda function to make a http request
    NodeLambdaFunction:
        Type: AWS::Lambda::Function
        Properties:
            Code:
                ZipFile: |
                    exports.handler = async (event) => {
                        const https = require('https');
                        const url = 'https://api.ipify.org?format=json';
                        const response = await new Promise((resolve, reject) => {
                            https.get(url, (res) => {
                                let data = '';
                                res.on('data', (chunk) => {
                                    data += chunk;
                                });
                                res.on('end', () => {
                                    resolve(JSON.parse(data));
                                });
                            }).on("error", (err) => {
                                reject(err);
                            });
                        });
                        return { elastic_ip: process.env.ELASTIC_IP, source_ip: response.ip };
                    };
            Handler: index.handler
            Role: !GetAtt NodeLambdaExecutionRole.Arn
            Runtime: nodejs18.x
            Timeout: 30
            Environment:
                Variables:
                    ELASTIC_IP: !Ref ElasticIP
            # VPC configuration
            VpcConfig:
                SecurityGroupIds:
                    - !Ref NodeLambdaSecurityGroup
                SubnetIds:
                    - !Ref PrivateSubnet

    # Node Lambda execution role
    NodeLambdaExecutionRole:
        Type: AWS::IAM::Role
        Properties:
            Path: /
            RoleName: !Sub ${AWS::StackName}-NodeLambdaExecutionRole
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                    - Effect: Allow
                      Principal:
                          Service:
                              - lambda.amazonaws.com
                      Action: sts:AssumeRole
            ManagedPolicyArns:
                - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
                - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
    # Node Lambda security group
    NodeLambdaSecurityGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
            GroupDescription: !Sub ${AWS::StackName} Node Lambda SG
            VpcId: !Ref VPC
            Tags:
                - Key: Name
                  Value: !Sub ${AWS::StackName} Node Lambda SG
Outputs:
    VPC:
        Description: The ID of the VPC
        Value: !Ref VPC
        Export:
            Name: !Sub ${AWS::StackName}-VPCID
    VPCCidrBlock:
        Description: The VPCCidrBlock of the VPC
        Value: !GetAtt VPC.CidrBlock
        Export:
            Name: !Sub ${AWS::StackName}-VPCCidrBlock
    PublicSubnet:
        Description: Public Subnet
        Value: !Ref PublicSubnet
        Export:
            Name: !Sub ${AWS::StackName}-PublicSubnet
    PrivateSubnet:
        Description: Private Subnet
        Value: !Ref PrivateSubnet
        Export:
            Name: !Sub ${AWS::StackName}-PrivateSubnet
    EIP:
        Value: !Ref ElasticIP
        Description: The Elastic IP associated to the NAT instance
        Export:
            Name: !Sub ${AWS::StackName}-EIP
