Description: Typesense single-node stack

Parameters:
    LatestLinuxAmiId:
        Type: "AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>"
        Default: "/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-arm64-gp2"
    InstanceType:
        Description: "Instance Size"
        Type: String
        Default: t4g.micro
        AllowedValues:
            - t4g.nano
            - t4g.micro
            - t4g.small
            - t4g.medium
            - t4g.large
            - t4g.xlarge
            - t4g.2xlarge
    EnvironmentType:
        Description: "Environment Type"
        Type: String
        Default: "dev"
    TypesenseVersion:
        Description: "Typesense Version"
        Type: String
        Default: 0.23.1
    TypesensePort:
        Description: "Typesense Port"
        Type: Number
        Default: 8108
    VolumeSize:
        Description: "Storage Volume Size (GB)"
        Type: Number
        Default: 8
    VolumeDevice:
        Description: "Storage Volume Device"
        Type: String
        Default: "/dev/sdi"
    VolumeMountPath:
        Description: "Storage Volume Mount Path"
        Type: String
        Default: "/mnt/ebs"
    VpcId:
        Description: "VPC Id"
        Type: "AWS::EC2::VPC::Id"
    Subnets:
        Description: "Subnets"
        Type: "List<AWS::EC2::Subnet::Id>"

Metadata:
    AWS::CloudFormation::Interface:
        ParameterGroups:
            - Label:
                  default: "Network Configuration"
              Parameters:
                  - VpcId
                  - Subnets
            - Label:
                  default: "Storage Configuration"
              Parameters:
                  - VolumeSize
                  - VolumeDevice
                  - VolumeMountPath
            - Label:
                  default: "Typesense Configuration"
              Parameters:
                  - EnvironmentType
                  - InstanceType
                  - TypesenseVersion
                  - TypesenseApiPort

Resources:
    # Launch Config
    LaunchConfig:
        Type: AWS::AutoScaling::LaunchConfiguration
        Properties:
            InstanceType: !Ref InstanceType # Graviton2 powered instances
            ImageId: !Ref LatestLinuxAmiId
            IamInstanceProfile: !GetAtt EC2InstanceProfile.Arn # assign cloudwatch role
            SecurityGroups:
                - !Ref EC2SecurityGroup
            UserData:
                Fn::Base64: !Sub |
                    #!/usr/bin/env bash
                    # get instance-id
                    EC2_INSTANCE_ID=$(curl -s http://instance-data/latest/meta-data/instance-id)

                    # attach volume
                    aws ec2 attach-volume --device ${VolumeDevice} --instance-id $EC2_INSTANCE_ID --volume-id ${EBSVolume} --region ${AWS::Region}

                    # wait for volume to be properly attached
                    DATA_STATE="unknown"
                    until [ "${!DATA_STATE}" == "attached" ]; do
                        DATA_STATE=$(aws ec2 describe-volumes \
                            --region ${AWS::Region} \
                            --filters \
                                Name=attachment.instance-id,Values=${!EC2_INSTANCE_ID} \
                                Name=attachment.device,Values=${VolumeDevice} \
                            --query Volumes[].Attachments[].State \
                            --output text)

                        sleep 5
                    done

                    # format the volume if doesn't have file system
                    blkid --match-token TYPE=ext4 ${VolumeDevice} || mkfs.ext4 -m0 ${VolumeDevice}

                    # create mount root folder
                    mkdir -p ${VolumeMountPath}

                    # mount the volume to folder
                    mount ${VolumeDevice} ${VolumeMountPath}

                    # persist the volume on restart
                    echo "${VolumeDevice} ${VolumeMountPath} ext4 defaults,nofail 0 2" >> /etc/fstab

                    # create typesense server config
                    if [ ! -f ${VolumeMountPath}/typesense.ini ]
                    then
                        echo "[server]
                    api-key = ${TypesenseApiKey.Value}
                    data-dir = ${VolumeMountPath}/data
                    log-dir = ${VolumeMountPath}/log
                    api-port = ${TypesensePort}" > ${VolumeMountPath}/typesense.ini
                        chown ec2-user:ec2-user ${VolumeMountPath}/typesense.ini
                    fi

                    # create typesense data folder if not exists
                    if [ ! -d ${VolumeMountPath}/data ]
                    then
                        mkdir -p ${VolumeMountPath}/data
                        chown -R ec2-user:ec2-user ${VolumeMountPath}/data
                    fi

                    # create typesense logs folder if not exists
                    if [ ! -d ${VolumeMountPath}/log ]
                    then
                        mkdir -p ${VolumeMountPath}/log
                        chown -R ec2-user:ec2-user ${VolumeMountPath}/log
                    fi

                    # download & unarchive typesense
                    curl -O https://dl.typesense.org/releases/${TypesenseVersion}/typesense-server-${TypesenseVersion}-linux-arm64.tar.gz
                    tar -xzf typesense-server-${TypesenseVersion}-linux-arm64.tar.gz -C /home/ec2-user
                    # remove archive
                    rm typesense-server-${TypesenseVersion}-linux-arm64.tar.gz

                    # create typesense service
                    echo "[Unit]
                    Description=Typesense service
                    After=network.target

                    [Service]
                    Type=simple
                    Restart=always
                    RestartSec=5
                    User=ec2-user
                    ExecStart=/home/ec2-user/typesense-server --config=${VolumeMountPath}/typesense.ini

                    [Install]
                    WantedBy=default.target" > /etc/systemd/system/typesense.service

                    # start typesense service
                    systemctl start typesense
                    # enable typesense daemon
                    systemctl enable typesense

    # ASG
    AutoScalingGroup:
        Type: AWS::AutoScaling::AutoScalingGroup
        Properties:
            LaunchConfigurationName: !Ref LaunchConfig
            DesiredCapacity: 1
            MinSize: 1
            MaxSize: 1
            TargetGroupARNs:
                - !Ref ALBTargetGroup
            # make sure the instances are launched in the same AZ as the EBS volume
            AvailabilityZones:
                - !Select [0, !GetAZs ""]
            Tags:
                - Key: Name
                  PropagateAtLaunch: true
                  Value: !Sub ${AWS::StackName}-${EnvironmentType}

    # Instance profile
    EC2InstanceProfile:
        Type: AWS::IAM::InstanceProfile
        Properties:
            InstanceProfileName: !Sub ${AWS::StackName}-${EnvironmentType}-instance-profile
            Path: /
            Roles:
                - !Ref EC2InstanceRole

    # Instance Role
    EC2InstanceRole:
        Type: AWS::IAM::Role
        Properties:
            RoleName: !Sub ${AWS::StackName}-${EnvironmentType}-instance-role
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                    - Effect: Allow
                      Principal:
                          Service:
                              - ec2.amazonaws.com
                      Action:
                          - sts:AssumeRole
            Path: /
            ManagedPolicyArns:
                - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
                - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
            Policies:
                - PolicyName: !Sub ${AWS::StackName}-${EnvironmentType}-instance-policy
                  PolicyDocument:
                      Version: "2012-10-17"
                      Statement:
                          # allow attaching EBS volumes
                          - Effect: Allow
                            Action:
                                - ec2:AttachVolume
                                - ec2:DetachVolume
                            Resource: "*"
    # EBS Volume
    EBSVolume:
        Type: AWS::EC2::Volume
        Properties:
            Size: !Ref VolumeSize
            VolumeType: gp3
            # make sure the instances are in the same AZ as the EBS volume
            AvailabilityZone: !Select [0, !GetAZs ""]
            Tags:
                - Key: Name
                  Value: !Sub ${AWS::StackName}-${EnvironmentType}
        DeletionPolicy: Snapshot

    # Instance Security Group
    EC2SecurityGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
            GroupDescription: allow connections from
            SecurityGroupIngress:
                # Allow HTTP on Typesense port only from ALB SG
                - IpProtocol: tcp
                  FromPort: !Ref TypesensePort
                  ToPort: !Ref TypesensePort
                  SourceSecurityGroupId: !GetAtt ALBSecurityGroup.GroupId
                # Allow SSH from anywhere - too open, narrow down the IPs or remove entirely
                - IpProtocol: tcp
                  FromPort: 22
                  ToPort: 22
                  CidrIp: 0.0.0.0/0

    # ALB Security Group allowing Port 80 from anywhere
    ALBSecurityGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
            GroupDescription: allow traffic on port 80
            SecurityGroupIngress:
                - IpProtocol: tcp
                  FromPort: 80
                  ToPort: 80
                  CidrIp: 0.0.0.0/0

    # Load Balancer
    ALB:
        Type: AWS::ElasticLoadBalancingV2::LoadBalancer
        Properties:
            Name: !Sub ${AWS::StackName}-${EnvironmentType}
            Subnets: !Ref Subnets
            SecurityGroups:
                - !GetAtt ALBSecurityGroup.GroupId

    # HTTP Listener
    ALBListener:
        Type: AWS::ElasticLoadBalancingV2::Listener
        Properties:
            DefaultActions:
                - Type: forward
                  TargetGroupArn: !Ref ALBTargetGroup
            LoadBalancerArn: !Ref ALB
            Port: 80
            Protocol: HTTP

    # Target Group
    ALBTargetGroup:
        Type: AWS::ElasticLoadBalancingV2::TargetGroup
        Properties:
            HealthCheckIntervalSeconds: 30
            HealthCheckProtocol: HTTP
            HealthCheckTimeoutSeconds: 15
            HealthyThresholdCount: 5
            HealthCheckPath: /health
            Matcher:
                HttpCode: 200
            Name: !Sub ${AWS::StackName}-${EnvironmentType}
            Port: !Ref TypesensePort
            Protocol: HTTP
            UnhealthyThresholdCount: 3
            VpcId: !Ref VpcId

    # Random String Generator
    RandomStringGenerator:
        Type: AWS::Lambda::Function
        Properties:
            FunctionName: !Sub ${AWS::StackName}-${EnvironmentType}-random-string
            Code:
                ZipFile: >
                    const response = require("cfn-response"), crypto = require("crypto");
                    exports.handler = (event, context) =>{
                        response.send(event, context, response.SUCCESS, {Value:crypto.randomBytes(parseInt(event['ResourceProperties']['Length'])).toString('hex')});
                    };
            Handler: index.handler
            Role: !GetAtt LambdaExecutionRole.Arn
            Runtime: nodejs16.x
            MemorySize: 128
            Timeout: 10

    # Typesense Admin API Key
    TypesenseApiKey:
        Type: AWS::CloudFormation::CustomResource
        Properties:
            Length: 32 # Keep in mind this is sent as String to Lambda
            ServiceToken: !GetAtt RandomStringGenerator.Arn

Outputs:
    ALBDnsName:
        Value: !GetAtt ALB.DNSName
        Description: The URL of the Load Balancer
        Export:
            Name: !Sub ${AWS::StackName}-ALBDnsName
    APIKey:
        Value: !GetAtt TypesenseApiKey.Value
        Description: Typesense admin API Key
        Export:
            Name: !Sub ${AWS::StackName}-TypesenseApiKey
